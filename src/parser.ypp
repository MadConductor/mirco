/* Code section */
%{
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <map>
#include <vector>
#include "../src/lang.hpp"

extern int yylineno;
extern int yylex();
extern int yyparse();
extern FILE *yyin;

unordered_map<int, RtEvent *> eventMap;
unordered_map<string, Definition *> defs;

void yyerror(const char *s) {
	fprintf(stderr, "Error: (line %d) %s\n", yylineno, s);
	exit(1);
}


%}

%union {
  int ival;
  float fval;
  char *sval;
  Note *noteval;
  Tone *toneval;
  Identifier *idval;
  SequenceNode *nodeval;
  SequenceParentNode *parentval;
  Sequence *sequenceval;
  Chord *chordval;
  vector<SequenceNode *> *nodelistval;
  vector<Identifier *> *idlistval;
}

%token DEFAULT AUTO SEQUENCE

%token <ival>  INT
%token <idval>  IDENTIFIER
%token <noteval>  NOTE
%token <toneval>  TONE_LITERAL
%token <sval>  OPERATOR

// unused
%token <fval>  FLOAT
%token <sval>  STRING

%type  <nodeval> sequence_node operation
%type  <sequenceval> sequence
%type  <chordval> chord
%type  <nodelistval> node_list
%type  <idlistval> id_list 
%type  <ival> map_target

%left '+' '-'
%left '*' '/'


%locations
%define parse.error verbose

%start exp

%% 

operation: 
  IDENTIFIER OPERATOR IDENTIFIER {
    $$ = doOperation($2, $1, $3);
  }
  | IDENTIFIER OPERATOR NOTE {
    $$ = doOperation($2, $1, $3);
  }
  | IDENTIFIER OPERATOR TONE_LITERAL {
    $$ = doOperation($2, $1, $3);
  }
  | IDENTIFIER OPERATOR sequence {
    $$ = doOperation($2, $1, $3);
  }  
  | IDENTIFIER OPERATOR chord {
    $$ = doOperation($2, $1, $3);
  }
  | IDENTIFIER OPERATOR '(' operation ')' {
    $$ = doOperation($2, $1, $4);
  }

  | NOTE OPERATOR NOTE {
    $$ = doOperation($2, $1, $3);
  }
  | NOTE OPERATOR IDENTIFIER {
    $$ = doOperation($2, $1, $3);
  }
  | NOTE OPERATOR TONE_LITERAL {
    $$ = doOperation($2, $1, $3);
  }
  | NOTE OPERATOR sequence {
    $$ = doOperation($2, $1, $3);
  }
  | NOTE OPERATOR chord {
    $$ = doOperation($2, $1, $3);
  }
  | NOTE OPERATOR '(' operation ')' {
    $$ = doOperation($2, $1, $4);
  }

  | TONE_LITERAL OPERATOR TONE_LITERAL {
    $$ = doOperation($2, $1, $3);
  }
  | TONE_LITERAL OPERATOR IDENTIFIER {
    $$ = doOperation($2, $1, $3);
  }
  | TONE_LITERAL OPERATOR NOTE {
    $$ = doOperation($2, $1, $3);
  }
  | TONE_LITERAL OPERATOR sequence {
    $$ = doOperation($2, $1, $3);
  }
  | TONE_LITERAL OPERATOR chord {
    $$ = doOperation($2, $1, $3);
  }
  | TONE_LITERAL OPERATOR '(' operation ')'  {
    $$ = doOperation($2, $1, $4);
  }

  | sequence OPERATOR sequence {
    $$ = doOperation($2, $1, $3);
  }
  | sequence OPERATOR IDENTIFIER {
    $$ = doOperation($2, $1, $3);
  }
  | sequence OPERATOR NOTE {
    $$ = doOperation($2, $1, $3);
  }
  | sequence OPERATOR TONE_LITERAL {
    $$ = doOperation($2, $1, $3);
  }
  | sequence OPERATOR chord {
    $$ = doOperation($2, $1, $3);
  }
  | sequence OPERATOR '(' operation ')'  {
    $$ = doOperation($2, $1, $4);
  }
  
  | chord OPERATOR chord {
    $$ = doOperation($2, $1, $3);
  }
  | chord OPERATOR IDENTIFIER {
    $$ = doOperation($2, $1, $3);
  }
  | chord OPERATOR NOTE {
    $$ = doOperation($2, $1, $3);
  }
  | chord OPERATOR TONE_LITERAL {
    $$ = doOperation($2, $1, $3);
  }
  | chord OPERATOR sequence {
    $$ = doOperation($2, $1, $3);
  }
  | chord OPERATOR '(' operation ')'  {
    $$ = doOperation($2, $1, $4);
  }
    
  | operation OPERATOR chord {
    $$ = doOperation($2, $1, $3);
  }
  | operation OPERATOR IDENTIFIER {
    $$ = doOperation($2, $1, $3);
  }
  | operation OPERATOR NOTE {
    $$ = doOperation($2, $1, $3);
  }
  | operation OPERATOR TONE_LITERAL {
    $$ = doOperation($2, $1, $3);
  }
  | operation OPERATOR sequence {
    $$ = doOperation($2, $1, $3);
  }
  | '(' operation ')' {
    $$ = $2;
  }
;

id_list: 
  id_list ',' IDENTIFIER {
    $1->push_back($3);
    $$ = $1;
  }
  | IDENTIFIER {
    $$ = new vector<Identifier *>();
    $$->push_back($1);
  }
  | {
    $$ = new vector<Identifier *>();
  }
;

definition: 
  SEQUENCE IDENTIFIER '(' id_list ')' '{' node_list '}' {
    Definition *d = new Definition($2->id, $4, $7);
    defs[$2->id] = d;
  }
;

node_list: 
  node_list ',' sequence_node {
    $1->push_back($3);
    $$ = $1;
  }
  | sequence_node {
    $$ = new vector<SequenceNode *>();
    $$->push_back($1);
  }  
  | {
    $$ = new vector<SequenceNode *>();
  }
;

sequence:
  IDENTIFIER '(' node_list ')' {
    Definition *d = defs[$1->id];
    Sequence *i = new Sequence(d, $3);
    $$ = i;
  }
;

chord:
  '(' node_list ')' {
    Chord *c = new Chord(*$2);
    $$ = c;
  }
;

sequence_node:
  IDENTIFIER {
    $$ = (SequenceNode *)$1;
  } 
  | NOTE {
    $$ = (SequenceNode *)$1;
  }
  | TONE_LITERAL {
    $$ = (SequenceNode *)$1;
  }
  | sequence {
    $$ = (SequenceNode *)$1;
  }  
  | operation {
    $$ = (SequenceNode *)$1;
  }
  | '(' operation ')' {
    $$ = (SequenceNode *)$2;
  }
  | chord {
    $$ = (SequenceNode *)$1;
  }
;

map_target:
  NOTE {
    $$ = $1->key;
  }
  | AUTO {
    $$ = -1;
  }
  | DEFAULT {
    $$ = -2;
  }
;

mapping: 
  map_target ':' sequence_node {
    eventMap[$1] = $3->renderRtEvents(1,1);
    printf(($3->toString()).c_str());
    printf("\n");
  }
;

exp:   
  exp definition {
  }
| exp mapping {
  }
| definition {
  }
| mapping {
  }
;
%%