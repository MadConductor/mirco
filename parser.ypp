/* Code section */
%{
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <map>
#include <vector>
#include "../src/lang.hpp"

extern int yylineno;
extern int yylex();
extern int yyparse();
extern FILE *yyin;

void yyerror(const char *s) {
	fprintf(stderr, "Error: (line %d) %s\n", yylineno, s);
	exit(1);
}


Engine engine;
%}

%union {
  int ival;
  float fval;
  char *nval;
  char *sval;
  char *idval;
}

%token DEFAULT AUTO SEQUENCE

%token <ival>  INT
%token <idval>  IDENTIFIER
%token <fval>  FLOAT
%token <nval>  NOTE
%token <sval>  STRING

%left '+' '-'
%left '*' '/'

%locations
%define parse.error verbose

%start exp

%% 

definition_args: 
  definition_args ',' IDENTIFIER {
    engine.addDefinitionArgument($3);
  }
  | IDENTIFIER {
    engine.addDefinitionArgument($1);
  }
  |  {
  }
;

definition_body: 
  definition_body ',' IDENTIFIER {
    Identifier *id = new Identifier($3);
    engine.addDefinitionListItem(id);
  }
  | definition_body ',' NOTE {
    Note *note = new Note($3);
    engine.addDefinitionListItem(note);
  }
  | definition_body ',' call {
  }
  | IDENTIFIER {
    Identifier *id = new Identifier($1);
    engine.addDefinitionListItem(id);  
  } 
  | NOTE {
    Note *note = new Note($1);
    engine.addDefinitionListItem(note);
  }
  | call {
  }  
  | {
  }
;

definition: 
  SEQUENCE IDENTIFIER '(' {
    engine.startDefinition("sequence", $2);
  } definition_args ')' '{' definition_body '}' {
    engine.endDefinition();
  }
;

call_args: 
  call_args ',' IDENTIFIER {
    Identifier *id = new Identifier($3);
    engine.addCallArgument(id);
  }
  | call_args ',' NOTE {
    Note *note = new Note($3);
    engine.addCallArgument(note);
  }
  | call_args ',' call {
  }
  | IDENTIFIER {
    Identifier *id = new Identifier($1);
    engine.addCallArgument(id);
  }
  | NOTE {
    Note *note = new Note($1);
    engine.addCallArgument(note);  
  }
  | call {
  }  
  | {
  }
;

call:
  IDENTIFIER '(' {
    engine.startCall($1);
  } call_args ')' {
    engine.endCall();
  }
;

map_target:
  NOTE {
    Note *note = new Note($1);
    engine.startMapping(note->key);
  }
  | AUTO {
    engine.startMapping(-1);
  }
  | DEFAULT {
    engine.startMapping(-2);
  }
;
mapping: 
  map_target ':' {
  } call {
    engine.endMapping();
  }
;


exp:   
  exp definition {
  }
| exp mapping {
  }
| definition {
  }
| mapping {
  }
;
%%